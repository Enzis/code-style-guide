{"name":"Front-End - Code Style Guide","tagline":"Guia de Estilo de Código","body":"Guia de Estilo de Código\r\n============\r\n\r\n> \"Toda linha de código deve parecer que foi escrita por uma única pessoa, não importa a quantidade de contribuidores.\" - Provérbio Chinês\r\n\r\nO documento a seguir descreve as regras de escrita nas linguagens de desenvolvimento que utilizamos: HTML, CSS e JavaScript.\r\n\r\nA ideia desse *documento/repositório* não é ser um guia de código completo. Mas, sim, ter um local para que os times que participam dos projetos possam se informar sobre padrões de códigos atualmente usados.\r\n\r\nComo este documento é novo, algumas regras podem não ter sido aplicadas em projetos antigos.\r\n\r\nEste é um documento vivo e mudanças podem, e devem, se necessário, acontecer a qualquer momento.\r\n\r\n## Sumário\r\n\r\n1. [Commits](#commits)\r\n2. [HTML](#html)\r\n3. [CSS](#css)\r\n4. [CSS Pré-processadores](#css-preprocessors) \r\n5. [Javascript](#js)\r\n6. [Referências](#references)\r\n7. [Licença](#license)\r\n\r\n<a name=\"commits\"></a>\r\n## 1. Commits\r\n\r\nPara facilitar a contribuição de qualquer pessoa nos projetos, todas as mensagens de *commit*, *pull requests* ou *discussões* devem ser em **Inglês**.\r\n\r\nAntes de *commitar* ajustes no projeto, verifique se já existe uma *task*/*issue* aberta e faça referência a ela usando '*#*' no início da sua mensagem de *commit*.\r\n\r\n```javascript\r\n// Bom\r\ngit commit -m \"#798 Placeholder adicionado no input\"\r\n\r\n// Ruim\r\ngit commit -m \"Placeholder adicionado no input\"\r\n```\r\n\r\n<a name=\"html\"></a>\r\n## 2. HTML\r\n\r\nA principal influencia das regras de HTML é o [Code Guide by @mdo](https://github.com/mdo/code-guide).\r\n\r\n### HTML Sumário\r\n\r\n1. [HTML Sintaxe](#html-syntax)\r\n1. [HTML Comentários](#html-comments)\r\n1. [HTML Encoding de Caracteres](#html-encoding)\r\n1. [HTML Ordem dos Atributos](#html-attribute-order)\r\n1. [HTML Performance](#html-performance)\r\n1. [HTML Código Base](#html-base)\r\n1. [HTML Reduzindo o Markup](#html-markup)\r\n\r\n<a name=\"html-syntax\"></a>\r\n### 2.1. HTML Sintaxe\r\n\r\nUse *soft-tabs* com dois espaços. Quatro espaços, dependendo do tamanho das *linhas/código*, pode dificultar uma rápida leitura.\r\n\r\nVocê pode configurar o seu editor preferido dessa forma.\r\n\r\n```html\r\n<!-- Bom -->\r\n<nav class=\"navbar\">\r\n  <ul class=\"nav\">\r\n    <li class=\"nav-item\">\r\n      <a class=\"nav-link\">\r\n\r\n<!-- Ruim-->\r\n<nav class=\"navbar\">\r\n      <ul class=\"nav\">\r\n            <li class=\"nav-item\">\r\n                  <a class=\"nav-link\">\r\n```\r\n\r\nSempre use aspas duplas.\r\n\r\n```html\r\n<!-- Bom -->\r\n<main class=\"main\">\r\n\r\n<!-- Ruim -->\r\n<main class='main'>\r\n```\r\n\r\nNão inclua `/` em elementos viúvos.\r\n\r\n```html\r\n<!-- Bom -->\r\n<hr>\r\n\r\n<!-- Ruim -->\r\n<hr />\r\n```\r\n\r\nSepare os blocos usando uma linha vazia e agrupe os elementos internos do bloco.\r\n\r\n```html\r\n<!-- Bom -->\r\n<ul class=\"nav-tabs\">\r\n  <li>...</li>\r\n  <li>...</li>\r\n  <li>...</li>\r\n  <li>...</li>\r\n</ul>\r\n\r\n<div class=\"tab-content\">\r\n  ...\r\n</div>\r\n\r\n<!-- Ruim -->\r\n<ul class=\"nav-tabs\">\r\n\r\n  <li>...</li>\r\n\r\n  <li>...</li>\r\n\r\n  <li>...</li>\r\n\r\n  <li>...</li>\r\n\r\n</ul>\r\n<div class=\"tab-content\">\r\n  ...\r\n</div>\r\n```\r\n\r\n<a name=\"html-comments\"></a>\r\n### 2.2. HTML Comentários\r\n\r\nSiga esta regra para adicionar comentários no HTML.\r\n\r\n```html\r\n<!-- este é um bom exemplo -->\r\n<!-- este é um bom exemplo END -->\r\n```\r\n\r\n<a name=\"html-encoding\"></a>\r\n### 2.3. HTML Encoding de Caracteres\r\n\r\nSempre use UTF-8 para encoding de caracteres.\r\n\r\n```html\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n</head>\r\n```\r\n\r\n<a name=\"html-attribute-order\"></a>\r\n### 2.4. HTML Ordem dos Atributos\r\n\r\nOs atributos do HTML devem estar na seguinte ordem para facilitar a leitura.\r\n\r\n1. `class`\r\n2. `id`, `name`\r\n3. `data-*`\r\n4. `src`, `for`, `type`, `href`\r\n5. `title`, `alt`\r\n6. `aria-*`, `role`\r\n\r\n```html\r\n<a class=\"...\" id=\"...\" data-modal=\"toggle\" href=\"#\">\r\n\r\n<input class=\"form-control\" type=\"text\">\r\n\r\n<img class=\"img-rounded\" src=\"...\" alt=\"...\">\r\n```\r\n\r\n<a name=\"html-performance\"></a>\r\n### 2.5. HTML Performance\r\n\r\nNos *includes* dos arquivos CSS e JavaScript **não** é necessário especificar o tipo de arquivo como `text/css` e `text/javascript`.\r\n\r\n```html\r\n<!-- Bom -->\r\n<link rel=\"stylesheet\" href=\"assets/css/style.css\">\r\n<script src=\"scripts.min.js\"></script>\r\n\r\n<!-- Ruim -->\r\n<script src=\"scripts.min.js\" type=\"text/javascript\"></script>\r\n</head>\r\n<body>\r\n```\r\n\r\nPara uma melhor performance, todos os arquivos JavaScripts devem estar antes de fechar o `<body>`, no fim do documento.\r\n\r\n```html\r\n<!-- Bom -->\r\n<script src=\"scripts.min.js\"></script>\r\n</body>\r\n\r\n<!-- Ruim -->\r\n<script src=\"scripts.min.js\"></script>\r\n</head>\r\n<body>\r\n```\r\n\r\nQuando o projeto usar apenas HTML, sempre minifique o código. Automatizadores de tarefas como o [Gulp](http://gulpjs.com/) tornam isso muito mais fácil.\r\n\r\n```html\r\n<!-- Bom -->\r\n<html><head>...</head><body><div class=\"container\">...</div></body></html>\r\n\r\n<!-- Ruim -->\r\n<html>\r\n  <head>\r\n    ...\r\n  </head>\r\n  <body>\r\n    <div class=\"container\">\r\n      ...\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\n<a name=\"html-base\"></a>\r\n### 2.6. HTML Código Base\r\n\r\nO código a seguir é uma base em HTML para iniciar rapidamente os projetos.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"pt-br\">\r\n<head>\r\n\r\n<meta charset=\"utf-8\">\r\n<meta name=\"format-detection\" content=\"telephone=no\">\r\n<meta name=\"viewport\" content=\"width=device-width\">\r\n\r\n<link rel=\"shortcut icon\" href=\"assets/img/ico/favicon.ico\">\r\n<link rel=\"logo\" type=\"image/svg\" href=\"assets/img/logo/logo.svg\">\r\n<link rel=\"stylesheet\" href=\"assets/css/style.css\">\r\n\r\n<title></title>\r\n\r\n</head>\r\n<body>\r\n\r\n<!-- Scripts -->\r\n<script src=\"js/scripts.min.js\"></script>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\nPara fornecer suporte para versões antigas do Internet Explorer...\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<!--[if IE]><![endif]-->\r\n<!--[if IE 7 ]><html lang=\"en\" class=\"ie7\"><![endif]-->\r\n<!--[if IE 8 ]><html lang=\"en\" class=\"ie8\"><![endif]-->\r\n<!--[if IE 9 ]><html lang=\"en\" class=\"ie9\"><![endif]-->\r\n<!--[if (gt IE 9)|!(IE)]><!--><html lang=\"pt-br\"><!--<![endif]-->\r\n<head>\r\n...\r\n```\r\n\r\n<a name=\"html-markup\"></a>\r\n### 2.7. HTML Reduzindo o Markup\r\n\r\nSempre que possível, evite elementos pais supérfluos quando escrever HTML.\r\n\r\n```html\r\n<!-- Bom -->\r\n<img class=\"avatar\" src=\"...\">\r\n\r\n<!-- Ruim -->\r\n<span class=\"avatar\">\r\n  <img src=\"...\">\r\n</span>\r\n```\r\n\r\n<a name=\"css\"></a>\r\n## 3. CSS\r\n\r\nA principal influência para as regras de CSS são o [Code Guide by @mdo](https://github.com/mdo/code-guide) e o [idiomatic CSS](https://github.com/necolas/idiomatic-css/).\r\n\r\n### CSS Sumário\r\n\r\n1. [CSS Sintaxe](#css-syntax)\r\n1. [CSS Ordem de Declaração](#css-order)\r\n1. [CSS Nome das Classes](#css-class-name)\r\n1. [CSS Performance](#css-performance)\r\n1. [CSS Media Queries](#css-media-queries) \r\n1. [CSS Comentários](#css-comments)\r\n\r\n<a name=\"css-syntax\"></a>\r\n### 3.1. CSS Sintaxe\r\n\r\nUse *soft-tabs* com dois espaços.\r\n\r\nVocê pode configurar o seu editor preferido dessa forma.\r\n\r\n```css\r\n/* Bom */\r\n.nav-item {\r\n  display: inline-block;\r\n  margin: 0 5px;\r\n}\r\n\r\n/* Ruim */\r\n.nav-item {\r\n    display: inline-block;\r\n    margin: 0 5px;\r\n}\r\n```\r\n\r\nSempre use aspas duplas.\r\n\r\n```css\r\n/* Bom */\r\n[type=\"text\"]\r\n[class^=\"...\"]\r\n\r\n.nav-item:after {\r\n  content: \"\";\r\n}\r\n\r\n/* Ruim */\r\n[type='text']\r\n[class^='...']\r\n\r\n.nav-item:after {\r\n  content: '';\r\n}\r\n```\r\n\r\nInclua um espaço antes de abrir o `{` da regra.\r\n\r\n```css\r\n/* Bom */\r\n.header {\r\n  ...\r\n}\r\n\r\n/* Ruim */\r\n.header{\r\n  ...\r\n}\r\n```\r\n\r\nInclua um espaço depois do `:` da declaração.\r\n\r\n```css\r\n/* Bom */\r\n.header {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n/* Ruim */\r\n.header{\r\n  margin-bottom:20px;\r\n}\r\n```\r\n\r\nInclua um `;` no fim da declaração.\r\n\r\n```css\r\n/* Bom */\r\n.header {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n/* Ruim */\r\n.header{\r\n  margin-bottom:20px\r\n}\r\n```\r\n\r\nQuando agrupar seletores, mantenha apenas um seletor por linha.\r\n\r\n```css\r\n/* Bom */\r\n.selector-1,\r\n.selector-2,\r\n.selector-3 {\r\n  ...\r\n}\r\n\r\n/* Ruim */\r\n.selector-1, .selector-2, .selector-3 {\r\n  ...\r\n}\r\n```\r\n\r\nDeclarações únicas devem ficar em uma linha apenas.\r\n\r\n```css\r\n/* Bom */\r\n.selector-1 { width: 50%; }\r\n\r\n/* Ruim */\r\n.selector-1 {\r\n  width: 50%;\r\n}\r\n```\r\n\r\nSepare as regras por uma linha em branco, inclusive regras de linha única.\r\n\r\n```css\r\n/* Bom */\r\n.selector-1 {\r\n  ...\r\n}\r\n\r\n.selector-2 {\r\n  ...\r\n}\r\n\r\n/* Ruim */\r\n.selector-1 {\r\n  ...\r\n}\r\n.selector-2 {\r\n  ...\r\n}\r\n```\r\n\r\nUse texto em caixa baixa, valores hexadecimais reduzidos e não especifique unidades quando o valor é zero.\r\n\r\n```css\r\n/* Bom */\r\n.selector-1 {\r\n  color: #aaa;\r\n  margin: 0;\r\n}\r\n\r\n/* Ruim */\r\n.selector-1 {\r\n  color: #AAAAAA;\r\n  margin: 0px;\r\n}\r\n```\r\n\r\n<a name=\"css-order\"></a>\r\n### 3.2. CSS Ordem de Declaração\r\n\r\nAs declarações devem ser adicionadas em contexto.\r\n\r\n```css\r\n/* Bom */\r\n.selector-1 {\r\n  /* box model */\r\n  display: block;\r\n  height: 200px;\r\n  margin: 5px;\r\n  padding: 5px;\r\n  width: 200px;\r\n  \r\n  /* positioning */\r\n  float: left;\r\n  \r\n  /* Typography */\r\n  font-family: Arial;\r\n  font-style: italic;\r\n  font-weight: bold;\r\n  \r\n  /* visual */\r\n  background: #fff;\r\n  border: #333 solid 1px;\r\n  color: #333;\r\n}\r\n\r\n/* Ruim */\r\n.selector-1 {\r\n  padding: 5px;\r\n  height: 200px;\r\n  background: #fff;\r\n  margin: 5px;\r\n  width: 200px;\r\n  color: #333;\r\n  border: #333 solid 1px;\r\n  display: block;\r\n  font-family: Arial;\r\n  font-style: italic;\r\n  font-weight: bold;\r\n  float: left;\r\n}\r\n```\r\n\r\n<a name=\"css-class-name\"></a>\r\n### 3.3. CSS Nome das Classes\r\n\r\nMantenha as classes em caixa baixa e use hífen para separar os nomes.\r\n\r\n```css\r\n/* Bom */\r\n.nav-item { ... }\r\n\r\n/* Ruim */\r\n.NavItem { ... }\r\n.nav_item { ... }\r\n```\r\n\r\nHífens servem como uma transição natural entre classes relacionadas. O primeiro nome deve ser baseado no pai imediato da classe que deseja criar.\r\n\r\n```css\r\n/* Bom */\r\n.navbar { ... }\r\n.nav { ... }\r\n.nav-item { ... }\r\n.nav-link { ... }\r\n\r\n/* Ruim */\r\n.item-nav { ... }\r\n.link-nav { ... }\r\n```\r\n\r\nNunca use abreviações nos nomes das classes.\r\n\r\nSempre use nomes de classe semanticamente relacionados com o **conteúdo do elemento** e jamais relacionados com a formatação visual deste.\r\n\r\n```css\r\n/* Bom */\r\n.btn { ... }\r\n.page-header { ... }\r\n.progress-bar { ... }\r\n.secundary-box { ... }\r\n\r\n/* Ruim */\r\n.s { ... }\r\n.ph { ... }\r\n.block { ... }\r\n.blue-box { ... }\r\n```\r\n\r\n<a name=\"css-performance\"></a>\r\n### 3.4. CSS Performance\r\n\r\nEvite o uso de IDs. Use somente quando necessário de fato.\r\n\r\n```css\r\n/* Bom */\r\n.header { ... }\r\n.section { ... }\r\n\r\n/* Ruim */\r\n#header { ... }\r\n#section { ... }\r\n```\r\n\r\nEvite seletores padrões para regras genéricas. Sempre use classes.\r\n\r\n```css\r\n/* Bom */\r\n.form-control { ... }\r\n.header { ... }\r\n.section { ... }\r\n\r\n/* Ruim */\r\ninput[type=\"text\"] { ... }\r\nheader\r\nsection\r\n```\r\n\r\nEvite elementos aninhados. A preferência é sempre para o uso de classes.\r\n\r\n```css\r\n/* Bom */\r\n.navbar { ... }\r\n.nav { ... }\r\n.nav-item { ... }\r\n.nav-link { ... }\r\n\r\n/* Ruim */\r\n.navbar ul { ... }\r\n.navbar ul li { ... }\r\n.navbar ul li a { ... }\r\n```\r\n\r\nAninhe somente quando precisar alterar o comportamento de uma classe por interferência de outra. Mantenha um limite de três elementos aninhados.\r\n\r\n```css\r\n/* Bom */\r\n.modal-footer .btn { ... }\r\n.progress.active .progress-bar { ... }\r\n\r\n/* Ruim */\r\n.modal-btn { ... }\r\n.progress.active .progress-bar .progress-item span { ... }\r\n```\r\n\r\nSempre minifique o código CSS. Automatizadores de tarefas como o [Gulp](http://gulpjs.com/) tornam isso muito mais fácil.\r\n\r\n```css\r\n<!-- Bom -->\r\n.navbar { ... }.nav { ... }.nav-item { ... }.nav-link { ... }\r\n\r\n<!-- Ruim -->\r\n.nav-item {\r\n  ...\r\n}\r\n.nav-link {\r\n  ...\r\n}\r\n```\r\n\r\n<a name=\"css-media-queries\"></a>\r\n### 3.5 Mobile First and Media Queries\r\n\r\nComece o desenvolvimento usando regras genéricas e adicione media queries começando com mobile.\r\n\r\nCompartilho um artigo com mais informações [CSS Modular com Mobile First](http://www.felipefialho.com/blog/2014/css-modular-com-mobile-first/).\r\n\r\n```css\r\n/* Bom */\r\n.navbar {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n@media (min-width: 480px) {\r\n  .navbar {\r\n    padding: 10px;\r\n  }\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .navbar {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n  }\r\n}\r\n\r\n@media (min-width: 992px) {\r\n  .navbar {\r\n    position: fixed;\r\n  }\r\n}\r\n\r\n/* Ruim */\r\n.navbar {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n\r\n@media (max-width: 767px) {\r\n  .navbar {\r\n    position: static;\r\n    padding: 10px;\r\n  }\r\n}\r\n\r\n```\r\n\r\nMantenha os media queries o mais próximo possível da regra que deseja alterar. Jamais coloque em documentos separados ou no fim do *stylesheet*.\r\n\r\n```css\r\n.navbar { ... }\r\n.nav { ... }\r\n.nav-item { ... }\r\n\r\n@media (min-width: 480px) {\r\n  .navbar { ... }\r\n  .nav { ... }\r\n  .nav-item { ... }\r\n}\r\n```\r\n \r\n\r\n<a name=\"css-comments\"></a>\r\n### 3.6. CSS Comentários\r\n\r\nTodos os comentários devem ser feitos usando a sintaxe do pré-processador em uso.\r\n\r\n```js\r\n//\r\n// Seção\r\n// ==================================================\r\n\r\n//\r\n// Sub-seção\r\n// --------------------------------------------------\r\n\r\n// Separador \r\n// --------------------------------------------------\r\n\r\n//\r\n// Bloco de comentário\r\n//\r\n//\r\n\r\n// Comentário simples\r\n```\r\n\r\n<a name=\"css-preprocessors\"></a>\r\n## 4. CSS Pré-processadores\r\n\r\nO ideal é utlizar pré-processadores em todos os projetos. Atualmente a equipe utiliza **Sass**, mas nada impede que a equipe adote outro pré-processador.\r\n\r\n### CSS Pré-processadores Sumário\r\n\r\n1. [CSS Pré-processadores Sintaxe](#preprocessors-syntax)  \r\n1. [CSS Pré-processadores Performance](#preprocessors-performance) \r\n1. [CSS Pré-processadores Media Queries](#preprocessors-media-queries) \r\n1. [CSS Pré-processadores Comentários](#preprocessors-comments)\r\n\r\n\r\n<a name=\"preprocessors-syntax\"></a>\r\n### 4.1. CSS Pré-processadores Sintaxe\r\n\r\nUse *soft-tabs* com dois espaços. Você pode configurar o seu editor preferido dessa forma.\r\n\r\n```css\r\n// Bom\r\n.nav-item {\r\n  display: inline-block;\r\n}\r\n\r\n// Ruim\r\n.nav-item {\r\n    display: inline-block;\r\n}  \r\n```\r\n\r\nNunca esqueça do ponto e vírgula, dois pontos e chaves.\r\n\r\n```css\r\n// Bom\r\n.header {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n}\r\n\r\n// Ruim\r\n.header \r\n  position: fixed\r\n  top: 0\r\n  right: 0\r\n  left: 0\r\n``` \r\n\r\nQuando agrupar seletores, mantenha apenas um seletor por linha.\r\n\r\n```css\r\n// Bom\r\n.selector-1,\r\n.selector-2,\r\n.selector-3 \r\n  ...\r\n \r\n\r\n// Ruim\r\n.selector-1, .selector-2, .selector-3 \r\n  ... \r\n``` \r\n\r\nSepare as regras dos elementos aninhados por uma linha vazia e outros blocos de regras com duas linhas vazias. \r\n\r\n```css\r\n// Bom\r\n.navbar {\r\n  margin: 0 0 20px;\r\n\r\n  li {\r\n    display: inline-block;\r\n  }\r\n}\r\n\r\n.nav {\r\n  display: block;\r\n\r\n  li {\r\n    float: left;\r\n  }\r\n}\r\n\r\n// Ruim\r\n.navbar {\r\n  margin: 0 0 20px; \r\n  li {\r\n    display: inline-block;\r\n  } \r\n}\r\n.nav {\r\n  display: block; \r\n  li {\r\n    float: left;\r\n  }\r\n}\r\n``` \r\n\r\nUse **$** para as váriaveis e **@** para mixins. \r\n\r\n```css\r\n// Bom\r\n$gray-darker  = #111\r\n$gray-dark    = #393C45\r\n$gray         = #555\r\n$gray-light   = #aaa\r\n$gray-lighter = #ECF1F5\r\n$gray-white   = #fbfbfb\r\n\r\n\r\n@list-unstyled {\r\n  color: $gray;\r\n  margin-bottom: 0;\r\n  padding-left: 0;\r\n  list-style: none;  \r\n}\r\n\r\n.list-item {\r\n  @include list-unstyled;\r\n}\r\n```\r\n\r\n<a name=\"preprocessors-performance\"></a>\r\n### 4.2. CSS Pré-processadores Performance\r\n\r\nCuidado com a facilidade de aninhar elementos com os pré-processadores. Continue evitando aninhamentos.\r\n\r\nSe utilizar, mantenha um limite de três elementos aninhados.\r\n\r\n```css\r\n// Bom\r\n.nav-item {\r\n  ...\r\n}\r\n\r\n// Ruim\r\n.navbar {\r\n  .nav {\r\n    .nav-item {\r\n      ... \r\n    }\r\n  }\r\n}\r\n```\r\n\r\nCrie *mixins* e use o [@include](http://sass-lang.com/guide#topic-6) para adicionar em vários elementos. \r\n\r\n```css\r\n@mixin clearfix {\r\n  &:before,\r\n  &:after {\r\n    content: \" \"; \r\n    display: table; \r\n  }\r\n\r\n  &:after {\r\n    clear: both; \r\n  }\r\n}\r\n\r\n.header {\r\n  @include clearfix; \r\n}\r\n\r\n.footer {\r\n  @include: clearfix; \r\n}\r\n```\r\n \r\n<a name=\"preprocessors-media-queries\"></a>\r\n### 4.3. CSS Pré-processadores Media Queries\r\n\r\nForneça as regras de *media queries* dentro do elemento. \r\n\r\n```css \r\n.navbar {\r\n  position: absolute;\r\n  top: 5px;\r\n  z-index: 5;\r\n   \r\n  @media (min-width: $screen-sm) {\r\n    position: fixed;\r\n    margin-right: $space-sm;\r\n  }\r\n\r\n  @media (min-width: $screen-md) { \r\n    right: 0; \r\n    top: 10px; \r\n  }\r\n}\r\n```\r\n \r\n<a name=\"preprocessors-comments\"></a>\r\n### 4.4. CSS Pré-processadores Comentários\r\n\r\nForneça um sumário no cabeçalho dos arquivos. \r\n\r\n```css \r\n//  \r\n// Variables\r\n//\r\n// 1. Colors\r\n// 2. Spaces \r\n// 3. Grid \r\n// 4. Typography\r\n//\r\n// ===============================================================\r\n\r\n// \r\n// 1. Colors\r\n// --------------------------------------------------\r\n\r\n...\r\n\r\n// \r\n// 2. Spaces\r\n// --------------------------------------------------\r\n\r\n...\r\n```\r\n\r\nPara elementos principais.\r\n\r\n```css  \r\n// \r\n// 1. Header\r\n// -------------------------------------------------- \r\n... \r\n```\r\n\r\nPara os elementos filhos.\r\n\r\n```css   \r\n// 1.1 Header Item\r\n// -------------------------------------------------- \r\n...\r\n```\r\n\r\nPara comentários genéricos.\r\n\r\n```css   \r\n// Comentário simples\r\n\r\n// Bloco de\r\n// Comentário\r\n...\r\n``` \r\n\r\n<a name=\"js\"></a>\r\n## 5. JavaScript\r\n\r\nAs principais influencias para as regras de escrita em JavaScript são o [idiomatic.js](https://github.com/rwldrn/idiomatic.js/) e o [Zeno Rocha Coding Style](https://github.com/zenorocha/my-coding-style/).\r\n\r\n### JavaScript Sumário\r\n\r\n1. [Javascript Sintaxe](#js-syntax)\r\n1. [Javascript Variáveis](#js-variables)\r\n1. [Javascript Performance](#js-performance)\r\n1. [Javascript e HTML5 Data Attributes](#js-data-attributes)\r\n1. [Javascript Comentários](#js-comments)\r\n\r\n<a name=\"js-syntax\"></a>\r\n### 5.1. JavaScript Sintaxe\r\n\r\nUse *soft-tabs* com dois espaços. Você pode configurar o seu editor preferido dessa forma.\r\n\r\n```js\r\n// Bom\r\nwhile (condition) {\r\n  statements\r\n}\r\n\r\n// Ruim\r\nwhile (condition) {\r\n    statements\r\n}\r\n```\r\n\r\nSempre use `;`.\r\n\r\n```js\r\n// Bom\r\nvar me = $(this);\r\ntest();\r\n\r\n// Ruim\r\nvar me = $(this)\r\ntest()\r\n```\r\n\r\nSempre use aspas simples.\r\n\r\n```js\r\n// Bom\r\nvar string = '<p class=\"foo\">Lorem Ipsum</p>';\r\nvar noteClick = me.attr('data-note');\r\n\r\n// Ruim\r\nvar string = \"<p class=\"foo\">Lorem Ipsum</p>\";\r\nvar noteClick = me.attr(\"data-note\");\r\n```\r\n\r\nMantenha o `else` na mesma linha em que fechar o `if`.\r\n\r\n```js\r\n// Bom\r\nif ( true ) {\r\n  ...\r\n} else {\r\n  ...\r\n}\r\n\r\n// Ruim\r\nif ( true ) {\r\n  ...\r\n}\r\nelse {\r\n  ...\r\n}\r\n```\r\n\r\nAdicione espaços entre os operadores.\r\n\r\n```js\r\n// Bom\r\nfor (i = 0; i < 10; i++) {\r\n  ...\r\n}\r\n\r\n// Ruim\r\nfor (i=0;i<10;i++) {\r\n  ...\r\n}\r\n```\r\n\r\nNunca adicione espaço entre a chave de função e o nome da função.\r\n\r\n```js\r\n// Bom\r\nfoo(function() {\r\n  ...\r\n});\r\n\r\n// Ruim\r\nfoo ( function () {\r\n  ...\r\n});\r\n```\r\n\r\nAdicione espaços fora dos `()`, mas nunca dentro deles.\r\n\r\n```js\r\n// Bom\r\nif (condition) {\r\n  statement\r\n}\r\n\r\n// Ruim\r\nif( condition ){\r\n  statement\r\n}\r\n```\r\n\r\nPara condicionais, sempre use `{}`.\r\n\r\n```js\r\n// Bom\r\nif (condition) {\r\n  statement\r\n} else if (condition) {\r\n  statement\r\n} else {\r\n  statement\r\n}\r\n\r\n// Ruim\r\nif (condition) statement;\r\nelse if (condition) statement;\r\nelse statement;\r\n```\r\n\r\nPara checar igualdade, use `===` ao invés de usar `==`.\r\n\r\n```js\r\n// Bom\r\nif (foo === 'foo') {\r\n  statement\r\n}\r\n\r\n// Ruim\r\nif (foo == 'foo') {\r\n  statement\r\n}\r\n```\r\n\r\n<a name=\"js-variables\"></a>\r\n### 5.2. JavaScript Variáveis\r\n\r\nTodas as variáveis devem ser declaradas antes do seu uso.\r\n\r\n```js\r\n// Bom\r\nvar me = $(this);\r\nvar noteClick = me.attr('data-note');\r\nnotes[noteClick].play();\r\n\r\n// Ruim\r\nnotes[noteClick].play();\r\nvar me = $(this);\r\nvar noteClick = me.attr('data-note');\r\n```\r\n\r\nSempre use `var` para declarar uma variável.\r\n\r\n```js\r\n// Bom\r\nvar me = $(this);\r\n\r\n// Ruim\r\nme = $(this);\r\n```\r\n\r\n<a name=\"js-performance\"></a>\r\n### 5.3. JavaScript Performance\r\n\r\nUse o [JSHint](http://www.jshint.com/) para detectar erros e potenciais problemas.\r\n\r\nSempre concatene e minifique o código JavaScript. Automatizadores de tarefas como o [Gulp](http://gulpjs.com/) tornam isso muito mais fácil.\r\n\r\n<a name=\"js-data-attributes\"></a>\r\n### 5.4. JavaScript and HTML5 Data Attributes\r\n\r\nEvite usar classes para iniciar interações em JavaScript. Prefira usar ***HTML5 Data Attributes***.\r\n\r\n```js\r\n// Bom\r\n$('[data-toggle=\"tab\"]');\r\n\r\n// Ruim\r\n$('.tab');\r\n```\r\n\r\nEssa abordagem mantém as classes responsáveis apenas pela estilização.\r\n\r\nDessa forma, elementos que compartilhar o mesmo estilo, mas não possuem as mesmas interações, podem funcionar separadamente.\r\n\r\n<a name=\"js-comments\"></a>\r\n### 5.5. JavaScript Comentários\r\n\r\nUma única linha acima do código que é comentado.\r\n\r\n```js\r\n// Bom\r\n// Bom exemplo de comentário\r\nvar me = $(this);\r\n\r\n// Ruim\r\nvar me = $(this); // Exemplo ruim de comentário\r\n```\r\n\r\n<a name=\"references\"></a>\r\n## 6. Referências\r\n\r\n* [Code Guide by @mdo](https://github.com/mdo/code-guide)\r\n* [idiomatic CSS](https://github.com/necolas/idiomatic-css/)\r\n* [idiomatic.js](https://github.com/rwldrn/idiomatic.js/)\r\n* [Zeno Rocha Coding Style](https://github.com/zenorocha/my-coding-style/)\r\n* [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript)\r\n\r\n<a name=\"license\"></a>\r\n## 7. Licença\r\n\r\n[MIT License](http://vinieloy.mit-license.org/) © Vinicius Eloy\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}